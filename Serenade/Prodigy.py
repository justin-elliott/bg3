#!/usr/bin/env python3

"""
Generates the files for the "Prodigy" ability enhancement feat.
"""

import os.path
import textwrap

base_dir = os.path.dirname(__file__) or '.'

attribute_step = 2
max_attribute_bonus = 12

roll_bonus_step = 4
max_roll_bonus = 20

attributes = ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"]

# Generate the passives
with open(os.path.join(base_dir, "Public", "Serenade", "Stats", "Generated", "Data", "Prodigy.txt"), "w") as f:
    f.write(textwrap.dedent(f"""\
        // DO NOT EDIT: This file was automatically generated by {os.path.basename(__file__)}

        new entry "Serenade_Prodigy"
        type "PassiveData"
        data "DisplayName" "Serenade_Prodigy_DisplayName"
        data "Description" "Serenade_Prodigy_Description"
        data "Icon" "Action_KnowledgeOfTheAges"
        data "Properties" "Highlighted"
        """))

    attribute_icon = {
        "Strength":     "Spell_Transmutation_EnhanceAbility_BullsStrenght",
        "Dexterity":    "Spell_Transmutation_EnhanceAbility_CatsGrace",
        "Constitution": "Spell_Transmutation_EnhanceAbility_BearsEndurance",
        "Intelligence": "Spell_Transmutation_EnhanceAbility_FoxsCunning",
        "Wisdom":       "Spell_Transmutation_EnhanceAbility_OwlsWisdom",
        "Charisma":     "Spell_Transmutation_EnhanceAbility_EaglesSplendor",
    }

    # Attribute bonuses
    for attribute in attributes:
        f.write(textwrap.dedent(f"""\

            new entry "Serenade_Prodigy{attribute}_0"
            type "PassiveData"
            data "DisplayName" "Serenade_Prodigy_NoBonus_DisplayName"
            data "Description" "Serenade_Prodigy{attribute}_NoBonus_Description"
            data "Icon" "{attribute_icon[attribute]}"
            data "Properties" "IsHidden"
            """))

        for bonus in range(attribute_step, max_attribute_bonus + attribute_step, attribute_step):
            f.write(textwrap.dedent(f"""\

                new entry "Serenade_Prodigy{attribute}_{bonus}"
                type "PassiveData"
                data "Boosts" "Ability({attribute},{bonus},30)"
                data "DisplayName" "Serenade_Prodigy{attribute}_{bonus}_DisplayName"
                data "Description" "Serenade_Prodigy{attribute}_{bonus}_Description"
                data "Icon" "{attribute_icon[attribute]}"
                data "Properties" "IsHidden"
                """))

        f.write(textwrap.dedent("""\

            new entry "Serenade_ProdigyRollBonus_0"
            type "PassiveData"
            data "DisplayName" "Serenade_Prodigy_NoBonus_DisplayName"
            data "Description" "Serenade_ProdigyRollBonus_NoBonus_Description"
            data "Icon" "PassiveFeature_Portent"
            data "Properties" "IsHidden"
            """))

    # Skill and ability bonuses
    for bonus in range(roll_bonus_step, max_roll_bonus + roll_bonus_step, roll_bonus_step):
        f.write(textwrap.dedent(f"""\

            new entry "Serenade_ProdigyRollBonus_{bonus}"
            type "PassiveData"
            data "Boosts" "RollBonus(SkillCheck,{bonus});RollBonus(RawAbility,{bonus})"
            data "DisplayName" "Serenade_ProdigyRollBonus_{bonus}_DisplayName"
            data "Description" "Serenade_ProdigyRollBonus_{bonus}_Description"
            data "Icon" "{f"PassiveFeature_Portent_{bonus}" if bonus <= 20 else f"PassiveFeature_Portent"}"
            data "Properties" "IsHidden"
            """))

# Generate the passive lists
with open(os.path.join(base_dir, "Public", "Serenade", "Lists", "PassiveLists.lsx"), "w") as f:
    attribute_guid = {
        "Strength":     "522041f0-d2af-43b7-9662-f8199b0b96e5",
        "Dexterity":    "a81788e5-6949-474b-9700-87864c4c510c",
        "Constitution": "fb9a4b78-4964-4344-b6f7-510709ce6d76",
        "Intelligence": "4fff72e3-3cc4-4208-8f08-7a73501b3a81",
        "Wisdom":       "47418954-13db-4017-bcca-b8ca9a109a46",
        "Charisma":     "eb2ac0f3-1abf-43ac-aa51-afbfdc32b06a",
    }

    f.write(textwrap.dedent(f"""\
        <?xml version="1.0" encoding="UTF-8"?>
        <!-- DO NOT EDIT: This file was automatically generated by {os.path.basename(__file__)} -->
        <save>
            <version major="4" minor="1" revision="1" build="0"/>
            <region id="PassiveLists">
                <node id="root">
                    <children>
        """))

    for attribute in attributes:
        attribute_bonuses = [f"Serenade_Prodigy{attribute}_{bonus}"
                             for bonus in range(0, max_attribute_bonus + attribute_step, attribute_step)]
        f.write(textwrap.indent(textwrap.dedent(f"""\
            <node id="PassiveList">
                <attribute id="Passives" type="LSString" value="{",".join(attribute_bonuses)}"/>
                <attribute id="UUID" type="guid" value="{attribute_guid[attribute]}"/>
            </node>
            """),
                " " * 4 * 4))

    roll_bonuses = [f"Serenade_ProdigyRollBonus_{bonus}"
                    for bonus in range(0, max_roll_bonus + roll_bonus_step, roll_bonus_step)]
    f.write(textwrap.dedent(f"""\
                        <node id="PassiveList">
                            <attribute id="Passives" type="LSString" value="{",".join(roll_bonuses)}"/>
                            <attribute id="UUID" type="guid" value="12b2f031-1837-46d6-ae05-50a3490b6065"/>
                        </node>
                    </children>
                </node>
            </region>
        </save>
        """))

# Generate the English localization
with open(os.path.join(base_dir, "Localization", "English", "Prodigy.loca.xml"), "w") as f:
    f.write(textwrap.dedent(f"""\
        <?xml version="1.0" encoding="utf-8"?>
        <!-- DO NOT EDIT: This file was automatically generated by {os.path.basename(__file__)} -->
        <contentList>
            <content contentuid="Serenade_Prodigy_NoBonus_DisplayName" version="1">No Bonus</content>
        """))

    for attribute in attributes:
        f.write(textwrap.indent(textwrap.dedent(f"""\
            <content contentuid="Serenade_Prodigy{attribute}_DisplayName" version="1">Prodigy: {attribute}</content>
            <content contentuid="Serenade_Prodigy{attribute}_Description" version="1">Add a bonus to your &lt;LSTag Tooltip="{attribute}"&gt;{attribute}&lt;/LSTag&gt;.</content>
            <content contentuid="Serenade_Prodigy{attribute}_NoBonus_Description" version="1">No bonus to &lt;LSTag Tooltip="{attribute}"&gt;{attribute}&lt;/LSTag&gt;.</content>
            """),
                " " * 4 * 1))

        for bonus in range(attribute_step, max_attribute_bonus + attribute_step, attribute_step):
            f.write(textwrap.indent(textwrap.dedent(f"""\
                <content contentuid="Serenade_Prodigy{attribute}_{bonus}_DisplayName" version="1">Prodigy: {attribute} +{bonus}</content>
                <content contentuid="Serenade_Prodigy{attribute}_{bonus}_Description" version="1">Increase your &lt;LSTag Tooltip="{attribute}"&gt;{attribute}&lt;/LSTag&gt; by {bonus}, to a maximum of 30.</content>
                """),
                    " " * 4 * 1))

    f.write(textwrap.indent(textwrap.dedent("""\
        <content contentuid="Serenade_ProdigyRollBonus_DisplayName" version="1">Prodigy: Roll Bonus</content>
        <content contentuid="Serenade_ProdigyRollBonus_Description" version="1">Add a bonus to your &lt;LSTag Tooltip="SkillCheck"&gt;Skill&lt;/LSTag&gt; and &lt;LSTag Tooltip="AbilityCheck"&gt;Ability&lt;/LSTag&gt; checks.</content>
        <content contentuid="Serenade_ProdigyRollBonus_NoBonus_Description" version="1">No bonus to your &lt;LSTag Tooltip="SkillCheck"&gt;Skill&lt;/LSTag&gt; and &lt;LSTag Tooltip="AbilityCheck"&gt;Ability&lt;/LSTag&gt; checks.</content>
        """),
            " " * 4 * 1))

    for bonus in range(roll_bonus_step, max_roll_bonus + roll_bonus_step, roll_bonus_step):
        f.write(textwrap.indent(textwrap.dedent(f"""\
            <content contentuid="Serenade_ProdigyRollBonus_{bonus}_DisplayName" version="1">Prodigy: Roll Bonus +{bonus}</content>
            <content contentuid="Serenade_ProdigyRollBonus_{bonus}_Description" version="1">Add {bonus} to your &lt;LSTag Tooltip="SkillCheck"&gt;Skill&lt;/LSTag&gt; and &lt;LSTag Tooltip="AbilityCheck"&gt;Ability&lt;/LSTag&gt; checks.</content>
            """),
                " " * 4 * 1))

    f.write(textwrap.dedent("""\
        </contentList>
        """))
