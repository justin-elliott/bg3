#!/usr/bin/env python3
"""
Localization for Baldur's Gate 3 mods.
"""

import __main__
import io
import os
import re

from collections.abc import ItemsView

import xml.etree.ElementTree as ElementTree

main_script = os.path.basename(__main__.__file__)

double_newline = re.compile("[ \t]*\n[ \t]*\n[ \t]*")
whitespace_run = re.compile("\\s{2,}")
whitespace_around_br = re.compile("\\s*<br>\\s*")


def strip_whitespace(s):
    return whitespace_around_br.sub("<br>", whitespace_run.sub(" ", double_newline.sub("<br><br>", s.strip())))


class Language():
    """Dictionary for a single language."""

    __mappings: {str, str}

    def __init__(self):
        self.__mappings = {}

    def __setitem__(self, key: str, text: str) -> None:
        self.__mappings[key] = strip_whitespace(text)

    def __getitem__(self, key: str) -> str:
        return self.__mappings[key]

    def xml(self) -> ElementTree:
        content_list = ElementTree.Element("contentList")
        for key, text in self.__mappings.items():
            content = ElementTree.SubElement(content_list, "content", contentuid=key, version="1")
            content.text = text
        return ElementTree.ElementTree(content_list)


class Localization():
    """Localization dictionaries."""

    __languages: {str, Language}

    def __init__(self):
        self.__languages = {}

    def language(self, name: str) -> Language:
        lang = self.__languages.setdefault(name, Language())
        return lang

    def write(self, mod_dir: str) -> None:
        for name, language in self.__languages.items():
            language_dir = os.path.join(mod_dir, "Localization", name)
            os.makedirs(language_dir, exist_ok=True)
            with open(os.path.join(language_dir, f"{name}.loca.xml"), "wb") as f:
                f.write(bytes("""<?xml version="1.0" encoding="UTF-8"?>\n""", "UTF-8"))
                f.write(bytes(
                    f"""<!-- DO NOT EDIT: This file was automatically generated by {main_script} -->\n""",
                    "UTF-8"))
                content_list = language.xml()
                ElementTree.indent(content_list, space=" "*4)
                content_list.write(f, encoding="UTF-8", xml_declaration=False)
